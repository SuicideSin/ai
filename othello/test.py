import sys
board = "...........................OX......XO..........................."

cellNeighbors = {i: {j for j in range(64) if j!=i and (abs(int(j/8)-int(i/8)) <= 1 and abs((j%8)-(i%8)) <= 1) } for i in range(64)}
cellPaths = {0: [[], [1, 2, 3, 4, 5, 6, 7], [8, 16, 24, 32, 40, 48, 56], [], [], [], [], [9, 18, 27, 36, 45, 54, 63]], 1: [[0], [2, 3, 4, 5, 6, 7], [9, 17, 25, 33, 41, 49, 57], [], [], [], [8], [10, 19, 28, 37, 46, 55]], 2: [[0, 1], [3, 4, 5, 6, 7], [10, 18, 26, 34, 42, 50, 58], [], [], [], [9, 16], [11, 20, 29, 38, 47]], 3: [[0, 1, 2], [4, 5, 6, 7], [11, 19, 27, 35, 43, 51, 59], [], [], [], [10, 17, 24], [12, 21, 30, 39]], 4: [[0, 1, 2, 3], [5, 6, 7], [12, 20, 28, 36, 44, 52, 60], [], [], [], [11, 18, 25, 32], [13, 22, 31]], 5: [[0, 1, 2, 3, 4], [6, 7], [13, 21, 29, 37, 45, 53, 61], [], [], [], [12, 19, 26, 33, 40], [14, 23]], 6: [[0, 1, 2, 3, 4, 5], [7], [14, 22, 30, 38, 46, 54, 62], [], [], [], [13, 20, 27, 34, 41, 48], [15]], 7: [[0, 1, 2, 3, 4, 5, 6], [], [15, 23, 31, 39, 47, 55, 63], [], [], [], [14, 21, 28, 35, 42, 49, 56], []], 8: [[], [9, 10, 11, 12, 13, 14, 15], [16, 24, 32, 40, 48, 56], [0], [], [1], [], [17, 26, 35, 44, 53, 62]], 9: [[8], [10, 11, 12, 13, 14, 15], [17, 25, 33, 41, 49, 57], [1], [0], [2], [16], [18, 27, 36, 45, 54, 63]], 10: [[8, 9], [11, 12, 13, 14, 15], [18, 26, 34, 42, 50, 58], [2], [1], [3], [17, 24], [19, 28, 37, 46, 55]], 11: [[8, 9, 10], [12, 13, 14, 15], [19, 27, 35, 43, 51, 59], [3], [2], [4], [18, 25, 32], [20, 29, 38, 47]], 12: [[8, 9, 10, 11], [13, 14, 15], [20, 28, 36, 44, 52, 60], [4], [3], [5], [19, 26, 33, 40], [21, 30, 39]], 13: [[8, 9, 10, 11, 12], [14, 15], [21, 29, 37, 45, 53, 61], [5], [4], [6], [20, 27, 34, 41, 48], [22, 31]], 14: [[8, 9, 10, 11, 12, 13], [15], [22, 30, 38, 46, 54, 62], [6], [5], [7], [21, 28, 35, 42, 49, 56], [23]], 15: [[8, 9, 10, 11, 12, 13, 14], [], [23, 31, 39, 47, 55, 63], [7], [6], [], [22, 29, 36, 43, 50, 57], []], 16: [[], [17, 18, 19, 20, 21, 22, 23], [24, 32, 40, 48, 56], [0, 8], [], [2, 9], [], [25, 34, 43, 52, 61]], 17: [[16], [18, 19, 20, 21, 22, 23], [25, 33, 41, 49, 57], [1, 9], [8], [3, 10], [24], [26, 35, 44, 53, 62]], 18: [[16, 17], [19, 20, 21, 22, 23], [26, 34, 42, 50, 58], [2, 10], [0, 9], [4, 11], [25, 32], [27, 36, 45, 54, 63]], 19: [[16, 17, 18], [20, 21, 22, 23], [27, 35, 43, 51, 59], [3, 11], [1, 10], [5, 12], [26, 33, 40], [28, 37, 46, 55]], 20: [[16, 17, 18, 19], [21, 22, 23], [28, 36, 44, 52, 60], [4, 12], [2, 11], [6, 13], [27, 34, 41, 48], [29, 38, 47]], 21: [[16, 17, 18, 19, 20], [22, 23], [29, 37, 45, 53, 61], [5, 13], [3, 12], [7, 14], [28, 35, 42, 49, 56], [30, 39]], 22: [[16, 17, 18, 19, 20, 21], [23], [30, 38, 46, 54, 62], [6, 14], [4, 13], [15], [29, 36, 43, 50, 57], [31]], 23: [[16, 17, 18, 19, 20, 21, 22], [], [31, 39, 47, 55, 63], [7, 15], [5, 14], [], [30, 37, 44, 51, 58], []], 24: [[], [25, 26, 27, 28, 29, 30, 31], [32, 40, 48, 56], [0, 8, 16], [], [3, 10, 17], [], [33, 42, 51, 60]], 25: [[24], [26, 27, 28, 29, 30, 31], [33, 41, 49, 57], [1, 9, 17], [16], [4, 11, 18], [32], [34, 43, 52, 61]], 26: [[24, 25], [27, 28, 29, 30, 31], [34, 42, 50, 58], [2, 10, 18], [8, 17], [5, 12, 19], [33, 40], [35, 44, 53, 62]], 27: [[24, 25, 26], [28, 29, 30, 31], [35, 43, 51, 59], [3, 11, 19], [0, 9, 18], [6, 13, 20], [34, 41, 48], [36, 45, 54, 63]], 28: [[24, 25, 26, 27], [29, 30, 31], [36, 44, 52, 60], [4, 12, 20], [1, 10, 19], [7, 14, 21], [35, 42, 49, 56], [37, 46, 55]], 29: [[24, 25, 26, 27, 28], [30, 31], [37, 45, 53, 61], [5, 13, 21], [2, 11, 20], [15, 22], [36, 43, 50, 57], [38, 47]], 30: [[24, 25, 26, 27, 28, 29], [31], [38, 46, 54, 62], [6, 14, 22], [3, 12, 21], [23], [37, 44, 51, 58], [39]], 31: [[24, 25, 26, 27, 28, 29, 30], [], [39, 47, 55, 63], [7, 15, 23], [4, 13, 22], [], [38, 45, 52, 59], []], 32: [[], [33, 34, 35, 36, 37, 38, 39], [40, 48, 56], [0, 8, 16, 24], [], [4, 11, 18, 25], [], [41, 50, 59]], 33: [[32], [34, 35, 36, 37, 38, 39], [41, 49, 57], [1, 9, 17, 25], [24], [5, 12, 19, 26], [40], [42, 51, 60]], 34: [[32, 33], [35, 36, 37, 38, 39], [42, 50, 58], [2, 10, 18, 26], [16, 25], [6, 13, 20, 27], [41, 48], [43, 52, 61]], 35: [[32, 33, 34], [36, 37, 38, 39], [43, 51, 59], [3, 11, 19, 27], [8, 17, 26], [7, 14, 21, 28], [42, 49, 56], [44, 53, 62]], 36: [[32, 33, 34, 35], [37, 38, 39], [44, 52, 60], [4, 12, 20, 28], [0, 9, 18, 27], [15, 22, 29], [43, 50, 57], [45, 54, 63]], 37: [[32, 33, 34, 35, 36], [38, 39], [45, 53, 61], [5, 13, 21, 29], [1, 10, 19, 28], [23, 30], [44, 51, 58], [46, 55]], 38: [[32, 33, 34, 35, 36, 37], [39], [46, 54, 62], [6, 14, 22, 30], [2, 11, 20, 29], [31], [45, 52, 59], [47]], 39: [[32, 33, 34, 35, 36, 37, 38], [], [47, 55, 63], [7, 15, 23, 31], [3, 12, 21, 30], [], [46, 53, 60], []], 40: [[], [41, 42, 43, 44, 45, 46, 47], [48, 56], [0, 8, 16, 24, 32], [], [5, 12, 19, 26, 33], [], [49, 58]], 41: [[40], [42, 43, 44, 45, 46, 47], [49, 57], [1, 9, 17, 25, 33], [32], [6, 13, 20, 27, 34], [48], [50, 59]], 42: [[40, 41], [43, 44, 45, 46, 47], [50, 58], [2, 10, 18, 26, 34], [24, 33], [7, 14, 21, 28, 35], [49, 56], [51, 60]], 43: [[40, 41, 42], [44, 45, 46, 47], [51, 59], [3, 11, 19, 27, 35], [16, 25, 34], [15, 22, 29, 36], [50, 57], [52, 61]], 44: [[40, 41, 42, 43], [45, 46, 47], [52, 60], [4, 12, 20, 28, 36], [8, 17, 26, 35], [23, 30, 37], [51, 58], [53, 62]], 45: [[40, 41, 42, 43, 44], [46, 47], [53, 61], [5, 13, 21, 29, 37], [0, 9, 18, 27, 36], [31, 38], [52, 59], [54, 63]], 46: [[40, 41, 42, 43, 44, 45], [47], [54, 62], [6, 14, 22, 30, 38], [1, 10, 19, 28, 37], [39], [53, 60], [55]], 47: [[40, 41, 42, 43, 44, 45, 46], [], [55, 63], [7, 15, 23, 31, 39], [2, 11, 20, 29, 38], [], [54, 61], []], 48: [[], [49, 50, 51, 52, 53, 54, 55], [56], [0, 8, 16, 24, 32, 40], [], [6, 13, 20, 27, 34, 41], [], [57]], 49: [[48], [50, 51, 52, 53, 54, 55], [57], [1, 9, 17, 25, 33, 41], [40], [7, 14, 21, 28, 35, 42], [56], [58]], 50: [[48, 49], [51, 52, 53, 54, 55], [58], [2, 10, 18, 26, 34, 42], [32, 41], [15, 22, 29, 36, 43], [57], [59]], 51: [[48, 49, 50], [52, 53, 54, 55], [59], [3, 11, 19, 27, 35, 43], [24, 33, 42], [23, 30, 37, 44], [58], [60]], 52: [[48, 49, 50, 51], [53, 54, 55], [60], [4, 12, 20, 28, 36, 44], [16, 25, 34, 43], [31, 38, 45], [59], [61]], 53: [[48, 49, 50, 51, 52], [54, 55], [61], [5, 13, 21, 29, 37, 45], [8, 17, 26, 35, 44], [39, 46], [60], [62]], 54: [[48, 49, 50, 51, 52, 53], [55], [62], [6, 14, 22, 30, 38, 46], [0, 9, 18, 27, 36, 45], [47], [61], [63]], 55: [[48, 49, 50, 51, 52, 53, 54], [], [63], [7, 15, 23, 31, 39, 47], [1, 10, 19, 28, 37, 46], [], [62], []], 56: [[], [57, 58, 59, 60, 61, 62, 63], [], [0, 8, 16, 24, 32, 40, 48], [], [7, 14, 21, 28, 35, 42, 49], [], []], 57: [[56], [58, 59, 60, 61, 62, 63], [], [1, 9, 17, 25, 33, 41, 49], [48], [15, 22, 29, 36, 43, 50], [], []], 58: [[56, 57], [59, 60, 61, 62, 63], [], [2, 10, 18, 26, 34, 42, 50], [40, 49], [23, 30, 37, 44, 51], [], []], 59: [[56, 57, 58], [60, 61, 62, 63], [], [3, 11, 19, 27, 35, 43, 51], [32, 41, 50], [31, 38, 45, 52], [], []], 60: [[56, 57, 58, 59], [61, 62, 63], [], [4, 12, 20, 28, 36, 44, 52], [24, 33, 42, 51], [39, 46, 53], [], []], 61: [[56, 57, 58, 59, 60], [62, 63], [], [5, 13, 21, 29, 37, 45, 53], [16, 25, 34, 43, 52], [47, 54], [], []], 62: [[56, 57, 58, 59, 60, 61], [63], [], [6, 14, 22, 30, 38, 46, 54], [8, 17, 26, 35, 44, 53], [55], [], []], 63: [[56, 57, 58, 59, 60, 61, 62], [], [], [7, 15, 23, 31, 39, 47, 55], [0, 9, 18, 27, 36, 45, 54], [], [], []]}
oppositeSide = {"X": "O", "O":"X"}

def coord(position):
    return(int(pos/8), pos%8)

def display(*args):
    board = {i: args[0][i] for i in range(len(args[0]))}

    if len(args) == 3:
        for i in args[1]:
            board[i] = '\033[32m' + args[2] + '\033[0m'

    for i in board:
        if board[i] == "X":
            board[i] = '\033[36mX\033[0m'
        elif board[i] == "O":
            board[i] = '\033[33mO\033[0m'

    border = ["-" for i in range(24)]
    border = "   {}".format("".join(border))
    print(border)
    for i in range(8):
        row = [board[j+8*i] for j in range(8)]
        row = "{} | {} | {}".format(i, "  ".join(row), i)
        print(row)
    print(border)
    cols = [str(i) for i in range(8)]
    cols = "{}  {}".format("  ", "  ".join(cols))
    print(cols)

def findPossible(board, pos, origin, visited, path, possible):
    global cellNeighbors, cellPaths, oppositeSide #, cellStraights

    opposite = oppositeSide[board[origin]]

    if pos is None:
        visited[origin] = None
        if opposite not in board:
            return
        for pos in cellNeighbors[origin]:
            if board[pos] == opposite:
                visited[pos] = origin
                path = []
                for route in cellPaths[origin]:
                    if pos in route:
                        path = route
                findPossible(board, pos, origin, visited, path, possible)

    elif board[pos] == "." and board[visited[pos]] == opposite:
        possible.add(pos)
        return
    else:
        for i in cellNeighbors[pos]:
            if i not in visited and i in path:
                visited[i] = pos
                findPossible(board, i, origin, visited, path, possible)

def packPossible(board, side):
    paths = []

    xPossible = set()
    xPos = {i for i in range(len(board)) if board[i] == "X"}
    for pos in xPos:
        findPossible(board, None, pos, {}, {}, xPossible)
    oPossible = set()
    oPos = {i for i in range(len(board)) if board[i] == "O"}
    for pos in oPos:
        findPossible(board, None, pos, {}, {}, oPossible)

    for i in range(len(board)):
        if board[i] == side:
            path = {}
            findPossible(board, None, i, path, {}, set())
            paths.append(path)

    return (xPossible,oPossible, paths)

def negascout(board, depth, alpha, beta, side):
    possible = {}
    possible['X'], possible['O'], paths = packPossible(board, side)
    opposite = oppositeSide[side]

    if depth == 0 or (len(possible['X']) == 0 and len(possible['O']) == 0):
        return board.count(side)
    first = True
    for pos in possible[side]:
        child = board[:pos] + side + board[pos+1:]
        row = int(pos/8)
        col = pos%8
        weighting = 0
        if pos == 0 or pos == 7 or pos == 56 or pos == 63:
            weighting = 10
        elif row == 0 or row == 7 or col == 0 or col == 7:
            weighting = 5
#         if pos in {1, 8, 6, 15, 48, 57, 62, 55}:
#             weighting = -5
        # if pos == 9 or pos == 14 or pos == 49 or pos == 54:
        #     weighting = -10
        if first == True:
            first = False
            score = -negascout(child, depth-1, -alpha-1, -alpha, opposite) + weighting
            if alpha < score < beta:
                score = -negascout(child, depth-1, -beta, -alpha, opposite) + weighting
        else:
            score = -negascout(child, depth-1, -beta, -alpha, opposite) + weighting
        alpha = max(alpha, score)
        if beta < alpha:
            break
    return alpha

if len(sys.argv) > 1:
    depth = int(sys.argv[1])
else:
    depth = 2

display(board)
side = 'X'
canMove = True
while canMove:
    possible = {}
    possible['X'], possible['O'], paths = packPossible(board, side)
    opposite = oppositeSide[side]

    if len(possible['X']) == 0 and len(possible['O']) == 0:
        canMove = False
        continue

    if len(possible[side]) == 0:
        print("{} cannot move.".format(side))
        side = opposite
        continue
    print("====== {}'s Turn ======".format(side))
    negas = {}
    for pos in possible[side]:
        child = board[:pos] + side + board[pos+1:]
        negas[pos] = negascout(child, depth, float("-inf"), float("inf"), side)
    maximum = float("-inf")
    for pos in negas:
        if negas[pos] > maximum:
            maximum = negas[pos]
            maxpos = pos
    movePos = maxpos   

    board = board[:movePos] + side + board[movePos+1:]
    flip = set()
    for path in paths:
        if movePos in path:
            parent = path[movePos]
            while parent is not None:
                flip.add(parent)
                parent = path[parent]
    for pos in flip:
        board = board[:pos] + side + board[pos+1:]



    display(board)
    side = opposite


xc = board.count("X")
oc = board.count("O")

if xc > oc:
    print("X wins {} to {}.".format(xc, oc))
elif oc > xc:
    print("O wins {} to {}.".format(oc, xc))
elif xc == oc:
    print("Game tied. Both players scored {}.".format(xc))
