import sys
from random import randint

cellPaths = {0: [[1, 2, 3, 4, 5, 6, 7], [8, 16, 24, 32, 40, 48, 56], [9, 18, 27, 36, 45, 54, 63]], 1: [[0], [2, 3, 4, 5, 6, 7], [9, 17, 25, 33, 41, 49, 57], [8], [10, 19, 28, 37, 46, 55]], 2: [[1, 0], [3, 4, 5, 6, 7], [10, 18, 26, 34, 42, 50, 58], [9, 16], [11, 20, 29, 38, 47]], 3: [[2, 1, 0], [4, 5, 6, 7], [11, 19, 27, 35, 43, 51, 59], [10, 17, 24], [12, 21, 30, 39]], 4: [[3, 2, 1, 0], [5, 6, 7], [12, 20, 28, 36, 44, 52, 60], [11, 18, 25, 32], [13, 22, 31]], 5: [[4, 3, 2, 1, 0], [6, 7], [13, 21, 29, 37, 45, 53, 61], [12, 19, 26, 33, 40], [14, 23]], 6: [[5, 4, 3, 2, 1, 0], [7], [14, 22, 30, 38, 46, 54, 62], [13, 20, 27, 34, 41, 48], [15]], 7: [[6, 5, 4, 3, 2, 1, 0], [15, 23, 31, 39, 47, 55, 63], [14, 21, 28, 35, 42, 49, 56]], 8: [[9, 10, 11, 12, 13, 14, 15], [16, 24, 32, 40, 48, 56], [0], [1], [17, 26, 35, 44, 53, 62]], 9: [[8], [10, 11, 12, 13, 14, 15], [17, 25, 33, 41, 49, 57], [1], [0], [2], [16], [18, 27, 36, 45, 54, 63]], 10: [[9, 8], [11, 12, 13, 14, 15], [18, 26, 34, 42, 50, 58], [2], [1], [3], [17, 24], [19, 28, 37, 46, 55]], 11: [[10, 9, 8], [12, 13, 14, 15], [19, 27, 35, 43, 51, 59], [3], [2], [4], [18, 25, 32], [20, 29, 38, 47]], 12: [[11, 10, 9, 8], [13, 14, 15], [20, 28, 36, 44, 52, 60], [4], [3], [5], [19, 26, 33, 40], [21, 30, 39]], 13: [[12, 11, 10, 9, 8], [14, 15], [21, 29, 37, 45, 53, 61], [5], [4], [6], [20, 27, 34, 41, 48], [22, 31]], 14: [[13, 12, 11, 10, 9, 8], [15], [22, 30, 38, 46, 54, 62], [6], [5], [7], [21, 28, 35, 42, 49, 56], [23]], 15: [[14, 13, 12, 11, 10, 9, 8], [23, 31, 39, 47, 55, 63], [7], [6], [22, 29, 36, 43, 50, 57]], 16: [[17, 18, 19, 20, 21, 22, 23], [24, 32, 40, 48, 56], [8, 0], [9, 2], [25, 34, 43, 52, 61]], 17: [[16], [18, 19, 20, 21, 22, 23], [25, 33, 41, 49, 57], [9, 1], [8], [10, 3], [24], [26, 35, 44, 53, 62]], 18: [[17, 16], [19, 20, 21, 22, 23], [26, 34, 42, 50, 58], [10, 2], [9, 0], [11, 4], [25, 32], [27, 36, 45, 54, 63]], 19: [[18, 17, 16], [20, 21, 22, 23], [27, 35, 43, 51, 59], [11, 3], [10, 1], [12, 5], [26, 33, 40], [28, 37, 46, 55]], 20: [[19, 18, 17, 16], [21, 22, 23], [28, 36, 44, 52, 60], [12, 4], [11, 2], [13, 6], [27, 34, 41, 48], [29, 38, 47]], 21: [[20, 19, 18, 17, 16], [22, 23], [29, 37, 45, 53, 61], [13, 5], [12, 3], [14, 7], [28, 35, 42, 49, 56], [30, 39]], 22: [[21, 20, 19, 18, 17, 16], [23], [30, 38, 46, 54, 62], [14, 6], [13, 4], [15], [29, 36, 43, 50, 57], [31]], 23: [[22, 21, 20, 19, 18, 17, 16], [31, 39, 47, 55, 63], [15, 7], [14, 5], [30, 37, 44, 51, 58]], 24: [[25, 26, 27, 28, 29, 30, 31], [32, 40, 48, 56], [16, 8, 0], [17, 10, 3], [33, 42, 51, 60]], 25: [[24], [26, 27, 28, 29, 30, 31], [33, 41, 49, 57], [17, 9, 1], [16], [18, 11, 4], [32], [34, 43, 52, 61]], 26: [[25, 24], [27, 28, 29, 30, 31], [34, 42, 50, 58], [18, 10, 2], [17, 8], [19, 12, 5], [33, 40], [35, 44, 53, 62]], 27: [[26, 25, 24], [28, 29, 30, 31], [35, 43, 51, 59], [19, 11, 3], [18, 9, 0], [20, 13, 6], [34, 41, 48], [36, 45, 54, 63]], 28: [[27, 26, 25, 24], [29, 30, 31], [36, 44, 52, 60], [20, 12, 4], [19, 10, 1], [21, 14, 7], [35, 42, 49, 56], [37, 46, 55]], 29: [[28, 27, 26, 25, 24], [30, 31], [37, 45, 53, 61], [21, 13, 5], [20, 11, 2], [22, 15], [36, 43, 50, 57], [38, 47]], 30: [[29, 28, 27, 26, 25, 24], [31], [38, 46, 54, 62], [22, 14, 6], [21, 12, 3], [23], [37, 44, 51, 58], [39]], 31: [[30, 29, 28, 27, 26, 25, 24], [39, 47, 55, 63], [23, 15, 7], [22, 13, 4], [38, 45, 52, 59]], 32: [[33, 34, 35, 36, 37, 38, 39], [40, 48, 56], [24, 16, 8, 0], [25, 18, 11, 4], [41, 50, 59]], 33: [[32], [34, 35, 36, 37, 38, 39], [41, 49, 57], [25, 17, 9, 1], [24], [26, 19, 12, 5], [40], [42, 51, 60]], 34: [[33, 32], [35, 36, 37, 38, 39], [42, 50, 58], [26, 18, 10, 2], [25, 16], [27, 20, 13, 6], [41, 48], [43, 52, 61]], 35: [[34, 33, 32], [36, 37, 38, 39], [43, 51, 59], [27, 19, 11, 3], [26, 17, 8], [28, 21, 14, 7], [42, 49, 56], [44, 53, 62]], 36: [[35, 34, 33, 32], [37, 38, 39], [44, 52, 60], [28, 20, 12, 4], [27, 18, 9, 0], [29, 22, 15], [43, 50, 57], [45, 54, 63]], 37: [[36, 35, 34, 33, 32], [38, 39], [45, 53, 61], [29, 21, 13, 5], [28, 19, 10, 1], [30, 23], [44, 51, 58], [46, 55]], 38: [[37, 36, 35, 34, 33, 32], [39], [46, 54, 62], [30, 22, 14, 6], [29, 20, 11, 2], [31], [45, 52, 59], [47]], 39: [[38, 37, 36, 35, 34, 33, 32], [47, 55, 63], [31, 23, 15, 7], [30, 21, 12, 3], [46, 53, 60]], 40: [[41, 42, 43, 44, 45, 46, 47], [48, 56], [32, 24, 16, 8, 0], [33, 26, 19, 12, 5], [49, 58]], 41: [[40], [42, 43, 44, 45, 46, 47], [49, 57], [33, 25, 17, 9, 1], [32], [34, 27, 20, 13, 6], [48], [50, 59]], 42: [[41, 40], [43, 44, 45, 46, 47], [50, 58], [34, 26, 18, 10, 2], [33, 24], [35, 28, 21, 14, 7], [49, 56], [51, 60]], 43: [[42, 41, 40], [44, 45, 46, 47], [51, 59], [35, 27, 19, 11, 3], [34, 25, 16], [36, 29, 22, 15], [50, 57], [52, 61]], 44: [[43, 42, 41, 40], [45, 46, 47], [52, 60], [36, 28, 20, 12, 4], [35, 26, 17, 8], [37, 30, 23], [51, 58], [53, 62]], 45: [[44, 43, 42, 41, 40], [46, 47], [53, 61], [37, 29, 21, 13, 5], [36, 27, 18, 9, 0], [38, 31], [52, 59], [54, 63]], 46: [[45, 44, 43, 42, 41, 40], [47], [54, 62], [38, 30, 22, 14, 6], [37, 28, 19, 10, 1], [39], [53, 60], [55]], 47: [[46, 45, 44, 43, 42, 41, 40], [55, 63], [39, 31, 23, 15, 7], [38, 29, 20, 11, 2], [54, 61]], 48: [[49, 50, 51, 52, 53, 54, 55], [56], [40, 32, 24, 16, 8, 0], [41, 34, 27, 20, 13, 6], [57]], 49: [[48], [50, 51, 52, 53, 54, 55], [57], [41, 33, 25, 17, 9, 1], [40], [42, 35, 28, 21, 14, 7], [56], [58]], 50: [[49, 48], [51, 52, 53, 54, 55], [58], [42, 34, 26, 18, 10, 2], [41, 32], [43, 36, 29, 22, 15], [57], [59]], 51: [[50, 49, 48], [52, 53, 54, 55], [59], [43, 35, 27, 19, 11, 3], [42, 33, 24], [44, 37, 30, 23], [58], [60]], 52: [[51, 50, 49, 48], [53, 54, 55], [60], [44, 36, 28, 20, 12, 4], [43, 34, 25, 16], [45, 38, 31], [59], [61]], 53: [[52, 51, 50, 49, 48], [54, 55], [61], [45, 37, 29, 21, 13, 5], [44, 35, 26, 17, 8], [46, 39], [60], [62]], 54: [[53, 52, 51, 50, 49, 48], [55], [62], [46, 38, 30, 22, 14, 6], [45, 36, 27, 18, 9, 0], [47], [61], [63]], 55: [[54, 53, 52, 51, 50, 49, 48], [63], [47, 39, 31, 23, 15, 7], [46, 37, 28, 19, 10, 1], [62]], 56: [[57, 58, 59, 60, 61, 62, 63], [48, 40, 32, 24, 16, 8, 0], [49, 42, 35, 28, 21, 14, 7]], 57: [[56], [58, 59, 60, 61, 62, 63], [49, 41, 33, 25, 17, 9, 1], [48], [50, 43, 36, 29, 22, 15]], 58: [[57, 56], [59, 60, 61, 62, 63], [50, 42, 34, 26, 18, 10, 2], [49, 40], [51, 44, 37, 30, 23]], 59: [[58, 57, 56], [60, 61, 62, 63], [51, 43, 35, 27, 19, 11, 3], [50, 41, 32], [52, 45, 38, 31]], 60: [[59, 58, 57, 56], [61, 62, 63], [52, 44, 36, 28, 20, 12, 4], [51, 42, 33, 24], [53, 46, 39]], 61: [[60, 59, 58, 57, 56], [62, 63], [53, 45, 37, 29, 21, 13, 5], [52, 43, 34, 25, 16], [54, 47]], 62: [[61, 60, 59, 58, 57, 56], [63], [54, 46, 38, 30, 22, 14, 6], [53, 44, 35, 26, 17, 8], [55]], 63: [[62, 61, 60, 59, 58, 57, 56], [55, 47, 39, 31, 23, 15, 7], [54, 45, 36, 27, 18, 9, 0]]}

oppositeSide = {"X": "O", "O":"X"}

corners = [0, 7, 56, 63]
xsquares = dict(zip([9, 14, 49, 54], corners))
csquares = {8: 0, 1: 0, 6: 7, 15: 7, 55: 63, 62: 63, 48: 56, 57: 56}

def findPossible(board, side):
    global cellPaths, oppositeSide

    opposite = oppositeSide[side]
    allPos = [pos for pos in range(64) if board[pos] == side]
    possible = set()

    for pos in allPos:
        for path in cellPaths[pos]:
            valid = False
            for pathPos in path:
                if board[pathPos] == opposite:
                    valid = True
                    continue
                elif board[pathPos] == side:
                    break
                elif board[pathPos] == '.':
                    if valid:
                        possible.add(pathPos)
                    break
    return possible

def alphabeta(board, depth, alpha, beta, onside, side):
    possible = {}
    possible['X'], possible['O'] = findPossible(board, 'X'), findPossible(board, 'O')
    opposite = oppositeSide[side]
    if depth == 0 or (len(possible['X']) == 0 and len(possible['O']) == 0):
        score = 0
        score += 0.001 * board.count(side) + len(possible[side])
        score += 10 * len([i for i in range(64) if board[i] == side and i in corners])
        score -= 10 * len([i for i in range(64) if board[i] == opposite and i in corners])
        score -= 10 * len([i for i in xsquares if board[i] != board[xsquares[i]]])
        #score -= 3 * len([i for i in csquares if board[i] != board[csquares[i]]])
        return score
    if onside:
        v = float("-inf")
        for pos in possible[side]:
            child = flipBoard(board, pos, side)
            v = max(v, alphabeta(child, depth -1, alpha, beta, False, side))
            alpha = max(alpha, v)
            if beta <= alpha:
                break
        return v
    else:
        v = float("inf")
        for pos in possible[opposite]:
            child = board[:pos] + opposite + board[pos+1:]
            v = min(v, alphabeta(child, depth-1, alpha, beta, True, side))
            beta = min(v, beta)
            if beta <= alpha:
                break
        return v

def nextMove(board, side, possible):
    movePos = None
    ab = {}
    for pos in possible:
        #child = board[:pos] + side + board[pos+1:]
        child = flipBoard(board, pos, side)
        ab[pos] = alphabeta(child, 3, float("-inf"), float("inf"), True, side)
    movePos = max(ab.keys(), key=(lambda key: ab[key]))
    return movePos

def flipBoard(board, move, side):
    opposite = oppositeSide[side]
    board = board[:move] + side + board[move+1:]
    flip = []
    paths = [path for path in cellPaths[move] if board[path[0]] == opposite]
    for path in cellPaths[move]:
        temp = []
        valid = False
        for pos in path:
            if board[pos] == '.':
                break
            elif board[pos] == side:
                valid = True
                break
            else:
                temp.append(pos)
        if valid:
            flip += temp
    for pos in flip:
        board = board[:pos] + side + board[pos+1:]

    return board

board = sys.argv[1]
side = sys.argv[2]

print(nextMove(board,side,findPossible(board, side)))
